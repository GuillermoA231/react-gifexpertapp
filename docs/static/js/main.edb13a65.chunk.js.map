{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,mCACI,sBAAMC,SAZO,SAACC,GAElBA,EAAEC,iBAGFN,GAAc,SAAAO,GAAI,OAAGL,GAAH,mBAAiBK,OACnCJ,EAAc,KAMV,SACI,uBACIK,KAAK,OACLC,MAAOP,EACPQ,SApBQ,SAACL,GACrBF,EAAcE,EAAEM,OAAOF,e,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGTC,EAHS,iDAGwCC,UAAWH,GAHnD,+DAIII,MAAMF,GAJV,cAITG,EAJS,gBAKMA,EAAKC,OALX,uBAKRC,EALQ,EAKRA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAZ1B,kBAgBRM,GAhBQ,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OAFAc,QAAQC,IAAIN,EAAGC,EAAMV,GAGjB,sBAAKgB,UAAU,yCAAf,UACI,4BAAIN,IACJ,qBAAKO,IAAKjB,EAAKkB,IAAKR,QCLnBS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAErB,ECEwB,SAAEA,GAE1B,MAA0BZ,mBAAS,CAC/BmB,KAAK,GACLe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAjBAC,qBAAU,WAEN1B,EAASC,GACR0B,MAAK,SAAAC,GAEFX,QAAQC,IAAIU,GACZH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,GACX,UAKP,CAACtB,IAGGuB,ED3B2BK,CAAc5B,GAAnCa,EAAb,EAAQN,KAAce,EAAtB,EAAsBA,QAetB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDlB,EAApD,OAECsB,GAAW,wCAEZ,qBAAKJ,UAAU,6CAAf,SAEYL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,aE3B5BkB,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAiBA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MC3BjC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.edb13a65.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange=(e)=>{\r\n        setInputValue(e.target.value);\r\n    };\r\n    \r\n    const handleSubmit = (e)=>{\r\n        //\r\n        e.preventDefault();\r\n        //console.log('Submit Hecho')\r\n        //setCategories\r\n        setCategories(cats=>[inputValue,...cats]);\r\n        setInputValue('');\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired,\r\n}","\r\nexport const getGifs = async(category) =>\r\n    {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=dwoHTiZssZHDdiIYGHGq87aSvgg4kQSu`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        //\r\n        const gifs = data.map(img =>{\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                url:img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    console.log(id,title,url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <p>{title}</p>\r\n            <img src={url} alt={title}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport {GifGridItem} from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const { data:images,  loading } = useFetchGifs( category );\r\n\r\n    \r\n    //Custom hooks: extraer logica de un componente y extraerla de tal manera que sea sencillo utilizarlo nuevamente\r\n\r\n    //useEffect: Sirve para ejecutar un codigo de manera condicional\r\n    //Esta Cuando se carga el componente por primera vez lanza la petición para obtener los gif\r\n    // y enviarlos a imagenes\r\n    // useEffect(() =>{\r\n    //     getGifs(category)\r\n    //     .then(setImages);\r\n    // }, [category]);\r\n    //si la categoria cambia va a volver a ejecutar useEffect\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n            {loading && <p>Loading</p>}\r\n\r\n            <div className=\"card-grid animate__animated animate__flash\">\r\n                    {\r\n                        images.map( img =>(\r\n                            <GifGridItem \r\n                                key={img.id}\r\n                                { ...img }\r\n                            />\r\n                        ))\r\n                    }\r\n            </div>                                           \r\n        </>\r\n        \r\n        \r\n    )\r\n}\r\n","//TODOS LOS HOOKS COMIENZAN CON \"use\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\n//los custom hooks funcionan como functional components\r\n// se le puede agregar efectos, reducers, contextos, etc.\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    //los efectos no pueden ser async pero adentro si\r\n    useEffect(() => {\r\n        \r\n        getGifs( category )\r\n        .then(imgs =>{\r\n\r\n            console.log(imgs)\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            },3000 );\r\n    \r\n\r\n        })\r\n\r\n    }, [category])\r\n\r\n\r\n    return state;  //{data:[],loading:true}\r\n\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['Big Chungus']);\r\n\r\n    //funcion para agregar un nuevo elemento al array\r\n    //Se crea un nuevo estado, NO ES ASÍ\r\n    //setCategories('HunterxHunter');\r\n    \r\n    //Es necesario usar el operador spread para mantener las categorias anteriores y agregar una nueva\r\n    //setCategories([...categories,'HunterxHunter']);\r\n    \r\n    //\r\n    // const handleAdd = () =>{\r\n    //     setCategories(cats => [...cats,'HunterXHunter']);\r\n\r\n    //     console.log(categories);\r\n    // }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category} \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}